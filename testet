Estou estudando um pouco mais sobre cybersegurança e queria entender mais sobre salt em senhas e hash
Salt em senhas e hash:
O que é um salt?

Um salt é uma string aleatória de caracteres que é combinada com a senha do usuário antes de ser aplicada a uma função hash. Isso torna o hash da senha único para cada usuário, mesmo que as senhas sejam as mesmas.

Por que usar um salt?

Os salts são usados para proteger as senhas contra ataques de dicionário e ataques de força bruta. Sem um salt, um invasor pode simplesmente usar um dicionário de senhas comuns para tentar adivinhar as senhas dos usuários. Com um salt, o invasor precisa gerar um novo dicionário para cada salt, o que torna o ataque muito mais difícil.

Como os salts são usados?

Quando um usuário cria uma nova conta, um salt aleatório é gerado e armazenado junto com a senha do usuário. Quando o usuário tenta fazer login, a senha digitada é combinada com o salt e a função hash é aplicada. O resultado da função hash é então comparado com o hash armazenado no banco de dados. Se os hashes forem iguais, o login é bem-sucedido.

Qual o tamanho ideal de um salt?

O tamanho ideal de um salt depende do algoritmo de hash usado e da força desejada. Um salt de 128 bits é geralmente considerado suficiente para a maioria das aplicações.

Recomendações:

Use um salt único para cada usuário.
Use um salt de tamanho suficiente.
Armazene o salt de forma segura.
Recursos adicionais:

Artigo da Wikipedia sobre Salt (criptografia): https://pt.wikipedia.org/wiki/Sal_(criptografia
Artigo da OWASP sobre autenticação: [URL inválido removido]
Observação:

É importante lembrar que o uso de um salt não garante a segurança total das senhas. É importante também usar senhas fortes e práticas de segurança adequadas.
foto do perfil
Sabendo em um salt não precisa ser secreto:"A técnica do sal consiste em simplesmente prefixar a senha com um dado aleatório antes que a mesma seja hasheada. Esse sal é criado durante o registro da senha, e então armazenado junto à mesma no BD (não é necessário que o sal seja secreto, somente que ele seja único [com alta probabilidade])." Podemos então desenvolver uma página de cadastro/login em que ao cadastrar uma senha, ele salve a senha em uma variável $password; Crie um valor de salt usando números randómicos e salve em uma viável chamada $salt; E crie uma variável chmada password_hash e salve concatene as duas variaveis e depois crie um hash da senha e envia para o banco. E quando o usuário for fazer o login, ele puxe no banco a senha hash e o salt salvo, e então concanete os valores de loguin e compare com password_verify com a senha hash recebida.

1
Sim, você está no caminho certo! A técnica de usar salt para armazenar senhas é uma ótima maneira de aumentar a segurança do seu sistema de login.

Vamos analisar passo a passo o que você mencionou:

1. Cadastro da senha:

$password: Armazena a senha digitada pelo usuário.
$salt: Crie um valor aleatório usando uma função segura de geração de números aleatórios (criptograficamente segura).
$password_hash: Concatene $password e $salt.
Aplique uma função de hash segura (como bcrypt, scrypt ou PBKDF2) a $password_hash.
Armazene $password_hash e $salt no banco de dados.
2. Login do usuário:

Recupere $password_hash e $salt do banco de dados para o usuário que está tentando fazer login.
Concatene a senha digitada pelo usuário com $salt.
Aplique a mesma função de hash usada no cadastro à string concatenada.
Compare o hash gerado com $password_hash armazenado no banco de dados.
Se os hashes forem iguais, a senha é válida e o login é bem-sucedido.
Pontos importantes:

Segurança do salt: O salt não precisa ser secreto, mas é crucial que seja único para cada usuário. Isso evita ataques de tabela arco-íris e outras técnicas que precompilam hashes para senhas comuns.
Tamanho do salt: Um salt de 128 bits é geralmente considerado suficiente para a maioria das aplicações.
Funções de hash: Utilize funções de hash seguras e com bom fator de custo (como bcrypt, scrypt ou PBKDF2). Elas aumentam o tempo necessário para calcular o hash, dificultando ataques de força bruta.
Armazenamento seguro: Armazene $password_hash e $salt de forma segura no banco de dados, utilizando criptografia e outras medidas de proteção.
Recursos adicionais:

Artigo da Wikipedia sobre Salt (criptografia): https://pt.wikipedia.org/wiki/Sal_(criptografia
Artigo da OWASP sobre autenticação: [URL inválido removido]
OWASP Password Storage Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
Lembre-se:

A segurança de senhas é um tema complexo e exige uma combinação de boas práticas. O uso de salt é uma peça fundamental, mas não garante a segurança total. É importante também usar senhas fortes, práticas de autenticação adequadas e outras medidas de proteção para garantir a segurança do seu sistema.

Fontes
github.com/chan9t1an/chan9t1an.github.io
foto do perfil
Como podemos desenvolver um sistema de login com salts e hash do php? De forma correta

1
Criando um sistema de login com salts e hash em PHP:
Passo a passo:

1. Configuração:

Crie uma biblioteca de funções:
Inclua funções para gerar salts aleatórios, calcular hashes com funções como bcrypt, scrypt ou PBKDF2 e verificar hashes.
Utilize bibliotecas confiáveis como password_hash e password_verify do PHP para facilitar o processo.
2. Cadastro do usuário:

Obter a senha do usuário:

Utilize um campo de senha seguro no formulário de cadastro.
Valide a senha para garantir que ela atenda aos requisitos de segurança (comprimento mínimo, caracteres especiais, etc.).
Gerar um salt aleatório:

Utilize a função openssl_random_pseudo_bytes() para gerar um salt de 128 bits.
Combinar senha e salt:

Concatene a senha e o salt em uma única string.
Calcular o hash da senha:

Utilize a função password_hash() com um algoritmo seguro (como bcrypt) e um custo elevado para gerar o hash da string concatenada.
Armazenar dados no banco de dados:

Armazene o hash da senha e o salt no banco de dados em campos separados.
Utilize criptografia para proteger os dados armazenados.
3. Login do usuário:

Obter a senha digitada:

Utilize um campo de senha seguro no formulário de login.
Recuperar o hash da senha e o salt do banco de dados:

Utilize o nome de usuário ou outro identificador único para recuperar os dados do banco de dados.
Combinar senha digitada e salt:

Concatene a senha digitada e o salt recuperado do banco de dados.
Calcular o hash da senha digitada:

Utilize a mesma função password_hash() e o mesmo algoritmo do cadastro para gerar o hash da string concatenada.
Comparar hashes:

Utilize a função password_verify() para comparar o hash da senha digitada com o hash armazenado no banco de dados.
Se os hashes forem iguais, a senha é válida e o login é bem-sucedido.
4. Segurança e boas práticas:

Utilize senhas fortes:

Oriente os usuários a criar senhas com no mínimo 12 caracteres, combinando letras maiúsculas e minúsculas, números e caracteres especiais.
Implemente medidas de proteção contra ataques:

Limite o número de tentativas de login.
Utilize CAPTCHAs para evitar bots.
Implemente autenticação de dois fatores (2FA).
Mantenha a biblioteca de funções atualizada:

Utilize as últimas versões das funções de hash e bibliotecas de segurança para garantir a proteção contra novas vulnerabilidades.
Recursos adicionais:

Artigo da Wikipedia sobre Salt (criptografia): https://pt.wikipedia.org/wiki/Sal_(criptografia
Artigo da OWASP sobre autenticação: https://es.wiktionary.org/wiki/removido
OWASP Password Storage Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
Observações:

Este é um guia básico para desenvolver um sistema de login com salts e hash em PHP. É importante consultar a documentação das funções utilizadas e implementar medidas adicionais de segurança para garantir a proteção do sistema.
A segurança de senhas é um tema complexo e exige atenção constante. Mantenha-se atualizado sobre as melhores práticas e tecnologias para garantir a segurança dos seus sistemas.
Fontes
github.com/chan9t1an/chan9t1an.github.io
foto do perfil
E o código?
Mostrar rascunhos
















Código PHP para sistema de login com salts e hash:
Exemplo básico:

PHP
<?php

// Função para gerar salt aleatório
function generateSalt() {
  return openssl_random_pseudo_bytes(128);
}

// Função para calcular hash da senha
function hashPassword($password, $salt) {
  return password_hash($password . $salt, PASSWORD_BCRYPT, ['cost' => 12]);
}

// Função para verificar senha
function verifyPassword($password, $hashedPassword, $salt) {
  return password_verify($password . $salt, $hashedPassword);
}

// Cadastro do usuário
$password = $_POST['password'];
$salt = generateSalt();
$hashedPassword = hashPassword($password, $salt);

// Armazenar $hashedPassword e $salt no banco de dados

// Login do usuário
$passwordAttempt = $_POST['password'];
$hashedPassword = retrieveHashedPasswordAndSaltFromDb($username); // Substitua `$username` pelo identificador do usuário

if (verifyPassword($passwordAttempt, $hashedPassword, $salt)) {
  // Login bem-sucedido
} else {
  // Login falhou
}

?>
Use o código com cuidado.
Observações:

Este código é um exemplo básico e pode ser adaptado de acordo com as necessidades do seu projeto.
É importante utilizar uma biblioteca de funções confiável para calcular hashes e verificar senhas, como password_hash e password_verify.
Implemente medidas adicionais de segurança, como validação de senha, limite de tentativas de login e autenticação de dois fatores.
Consulte a documentação das funções utilizadas para garantir a correta implementação do sistema.
Recursos adicionais:

Documentação da função password_hash: https://www.php.net/manual/en/function.password-hash.php
Documentação da função password_verify: https://www.php.net/manual/en/function.password-verify.php
Lembre-se:

A segurança de senhas é um tema complexo e exige atenção constante. Mantenha-se atualizado sobre as melhores práticas e tecnologias para garantir a segurança dos seus sistemas.
